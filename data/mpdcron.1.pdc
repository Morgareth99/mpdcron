% mpdcron(1) manual
% Ali Polatel <alip@exherbo.org>
% December 20, 2009

# NAME
mpdcron - cron like daemon for mpd

# SYNOPSIS
mpdcron [*option*]

# DESCRIPTION
mpdcron is a cron like daemon for mpd. It connects to mpd, waits for idle events.
It has two interfaces:

- Hooks which are executed after setting environment variables which hooks can use to get more
  information about the event without having to connect to mpd.
- Modules, which are dynamically loaded and have direct access to mpd connection and the file
  descriptor of mpdcron's configuration file.

By default it will get the hostname and port for mpd from **MPD\_HOST** and **MPD\_PORT**
environment variables. **MPD\_PASSWORD** environment variable can be set to make mpdcron connect to
a password-protected mpd.  If these environment variables aren't set, mpdcron connects to localhost
on port 6600.

# OPTIONS
-?, \--help
:   Show help options and exit.

-V, \--version
:   Print version information and exit.

-k, \--kill
:   Instead of launching the daemon, attempt to kill the already running daemon.

-n, \--no-daemon
:   Don't detach from console. This option can be used for debugging.

# CONFIGURATION
At startup mpdcron reads its configuration from the file MPDCRON_DIR/mpdcron.conf where
**MPDCRON\_DIR** is ~/.mpdcron by default. Configuration file is in standard .ini format.

\# mpdcron configuration file\
\#\
[main]\
\# Path to the PID file, by default the PID file is MPDCRON_DIR/mpdcron.pid\
**pidfile** = /path/to/mpdcron.pid\
\# Wait this many seconds after sending signal to kill the daemon.\
\# Default is 3 seconds.\
**killwait** = 3\
[mpd]\
\# Semicolon delimited list of events to wait for. By default mpdcron waits for all events.\
\# Valid events are:\
\# *database*: Song database has been updated.\
\# *stored\_playlist*: A stored playlist has been modified, created, deleted or renamed.\
\# *playlist*: The queue has been modified.\
\# *player*: The player state has been changed: play, stop, pause, seek, ...\
\# *mixer*: The volume has been modified.\
\# *output*: An audio output device has been enabled or disabled.\
\# *options*: Options have changed: crossfade, random, repeat, ...\
\# *update*: A database update has started or finished.\
**events** = player;mixer\
\# Interval in seconds to reconnect to mpd after an error or disconnect.\
**reconnect** = 5\
\# Timeout in milliseconds for mpd timeout, 0 for default timeout of libmpdclient.\
**timeout** = 0
\# MODULES
\# Modules are specified in event sections as a semi-colon delimited list like:
[player]
modules = module1;module2
[mixer]
modules = module3;module4

# MODULES
mpdcron can load modules dynamically. These modules have direct access to mpd connection thus can do
a lot of fancy stuff. A module needs to define **mpdcron\_run()** function which is called depending
on the event like below:

- **database**: int mpdcron\_run(const struct mpd\_connection \*, const struct mpd\_stats \*);
- **stored_playlist**: int mpdcron\_run(const struct mpd\_connection \*);
- **playlist**: int mpdcron\_run(const struct mpd_connection \*);
- **mixer**: int mpdcron\_run(const struct mpd\_connection \*, const struct mpd\_status \*);
- **output**: int mpdcron\_run(const struct mpd\_connection \*);
- **options**: int mpdcron\_run(const struct mpd\_connection \*, const struct mpd\_status \*);
- **update**: int mpdcron\_run(const struct mpd\_connection \*, const struct mpd_status \*);

Here are mpdcron\_run()'s defined return values:\
\
enum module_retval {\
MODULE_RETVAL_SUCCESS = 0, /\*\* Success \*\*/\
MODULE_RETVAL_RECONNECT, /\*\* Schedule a reconnection to mpd server \*\*/\
MODULE_RETVAL_RECONNECT_NOW, /\*\* Schedule a reconnection to mpd server immediately. \*\*/\
MODULE_RETVAL_UNLOAD, /\*\* Unload the module \*\*/\
};\
\
Modules may also define mpdcron_init() and mpdcron_close() functions to initialize and finalize.
The prototypes are:

- int mpdcron\_init(int, GKeyFile *);
- void mpdcron\_close(void);

Where the first argument is non-zero when \--no-daemon option is passed. The fd (GKeyFile \*) points to mpdcron's
configuration file. If the init function returns non-zero, the module is unloaded.
mpdcron\_close() function is self-explanatory. It should be called to do any kind of cleaning up.

# MODULE LOADING
To load a module, the user has to mention its name in the event section of the configuration file.
See CONFIGURATION section for more information.
mpdcron looks for the modules first under MPDCRON_DIR/modules/ where **MPDCRON\_DIR** is ~/.mpdcron by
default. Next it looks at LIBDIR/mpdcron-VERSION/modules where **LIBDIR** is /usr/lib on most systems.

# STANDARD MODULES
- **scrobbler**: mpdcron standard module to submit songs to Last.fm or Libre.fm.\
Requires curl.\
Example configuration:\
\# mpdcron configuration file\
...\
\# Load it in event group player:\
[player]\
modules = scrobbler\
\# Module options are specified in the scrobbler group:\
[scrobbler]\
proxy = http://127.0.0.1:8080\
\# Last.fm credentials are specified in the last.fm group:\
\# The password can be specified in two ways, either bare or in the form md5:MD5_HASH\
[last.fm]\
username = myusername\
password = mypassword\
url = http://post.audioscrobbler.com\
\# Libre.fm credentials are specified in the libre.fm group:\
[libre.fm]\
username = myusername\
password = mypassword\
url = http://turtle.libre.fm

# HOOKS
mpdcron executes hooks depending on the event received from mpd. Hooks are stored under
MPDCRON\_DIR/hooks where **MPDCRON\_DIR** is ~/.mpdcron by default. Here's a list of hooks and commands
run before them:

- **hooks/database**: mpdcron calls **stats** before this and updates the environment.
- **hooks/stored\_playlist**: mpdcron calls **list\_all\_meta** command and updates the environment.
- **hooks/playlist**: mpdcron calls **list\_queue\_meta** and updates the environment.
- **hooks/player**: mpdcron calls **status** and **currentsong** and updates the environment.
- **hooks/mixer**: mpdcron calls **status** and updates the environment.
- **hooks/output**: mpdcron calls **outputs** and updates the environment.
- **hooks/options**: mpdcron calls **status** and updates the environment.
- **hooks/update**: mpdcron calls **status** and updates the environment.

# ENVIRONMENT VARIABLES
Here's a list of environment variables mpdcron sets depending on the command sent:

- **currentsong**:
    * **MPD\_SONG\_URI**: URI of the song.
    * **MPD\_SONG\_LAST\_MODIFIED**: Time of last modification.\
      (in format: "%Y-%m-%d %H-%M-%S %Z")
    * **MPD\_SONG\_DURATION**: Duration in seconds of the song.
    * **MPD\_SONG\_POS**: Position of this song in the queue.
    * **MPD\_SONG\_ID**: ID of the song.
    * **MPD\_SONG\_TAG\_ARTIST**: Artist tag of the song.
    * **MPD\_SONG\_TAG\_ALBUM**: Album tag of the song.
    * **MPD\_SONG\_TAG\_ALBUM\_ARTIST**: Album artist tag of the song.
    * **MPD\_SONG\_TAG\_TITLE**: Title tag of the song.
    * **MPD\_SONG\_TAG\_TRACK**: Track number tag of the song.
    * **MPD\_SONG\_TAG\_NAME**: Name tag of the song.
    * **MPD\_SONG\_TAG\_GENRE**: Genre tag of the song.
    * **MPD\_SONG\_TAG\_DATE**: Date tag of the song.
    * **MPD\_SONG\_TAG\_COMPOSER**: Composer tag of the song.
    * **MPD\_SONG\_TAG\_PERFORMER**: Performer tag of the song.
    * **MPD\_SONG\_TAG\_COMMENT**: Comment tag of the song.
    * **MPD\_SONG\_TAG\_DISC**: Disc tag of the song.
    * **MPD\_SONG\_TAG\_MUSICBRAINZ\_ARTISTID**: Musicbrainz Artist ID tag of the song.
    * **MPD\_SONG\_TAG\_MUSICBRAINZ\_ALBUMID**: Musicbrainz Album ID tag of the song.
    * **MPD\_SONG\_TAG\_MUSICBRAINZ\_ALBUMARTISTID**: Musicbrainz Album artist ID tag of the song.
    * **MPD\_SONG\_TAG\_MUSICBRAINZ\_TRACKID**: Musicbrainz Track ID tag of the song.
- **stats**:
    * **MPD\_DATABASE\_UPDATE\_TIME**: A date specifying last update time.\
      (in format: "%Y-%m-%d %H-%M-%S %Z")
    * **MPD\_DATABASE\_ARTISTS**: Number of artists in the database.
    * **MPD\_DATABASE\_ALBUMS**: Number of albums in the database.
    * **MPD\_DATABASE\_SONGS**: Number of songs in the database.
    * **MPD\_DATABASE\_PLAY_TIME**: Accumulated time mpd was playing music since the process was started.
    * **MPD\_DATABASE\_UPTIME**: Uptime of mpd in seconds.
    * **MPD\_DATABASE\_DB\_PLAY\_TIME**: Accumulated duration of all songs in the database.
- **status**:
    * **MPD\_STATUS\_VOLUME**: Volume
    * **MPD\_STATUS\_REPEAT**: Repeat (boolean, 0 or 1)
    * **MPD\_STATUS\_RANDOM**: Random (boolean, 0 or 1)
    * **MPD\_STATUS\_SINGLE**: Single (boolean, 0 or 1)
    * **MPD\_STATUS\_CONSUME**: Consume (boolean, 0 or 1)
    * **MPD\_STATUS\_QUEUE\_LENGTH**: Queue/Playlist length.
    * **MPD\_STATUS\_CROSSFADE**: Crossfade in seconds.
    * **MPD\_STATUS\_SONG\_POS**: Position of the current playing song.
    * **MPD\_STATUS\_SONG\_ID**: ID of the current playing song.
    * **MPD\_STATUS\_ELAPSED\_TIME**: Elapsed time in seconds
    * **MPD\_STATUS\_ELAPSED_MS**: Elapsed time in milliseconds.
    * **MPD\_STATUS\_TOTAL\_TIME**: Total time in seconds.
    * **MPD\_STATUS\_KBIT\_RATE**: Current bit rate in kbps.
    * **MPD\_STATUS\_UPDATE\_ID**: The ID of the update.
    * **MPD\_STATUS\_STATE**: State, one of **play**, **pause**, **stop** or **unknown**
    * **MPD\_STATUS\_AUDIO\_FORMAT**: Specifies whether audio format is available (boolean, 0 or 1)
    * **MPD\_STATUS\_AUDIO\_FORMAT\_SAMPLE\_RATE**: The sample rate in Hz.
    * **MPD\_STATUS\_AUDIO\_FORMAT\_BITS**: The number of significant bits per sample.
    * **MPD\_STATUS\_AUDIO\_FORMAT\_CHANNELS**: The number of channels. 1 for mono, 2 for stereo.
- **outputs**:
    * **MPD\_OUTPUT\_ID\_%d**: Where **%d** is a number (starting from 1), specifies the name of the given output ID.
    * **MPD\_OUTPUT\_ID\_%d\_ENABLED:** Where **%d** is a number (starting from 1), specifies
      whether the output is enabled (boolean, 0 or 1)
- **list\_queue\_meta**:
    * All songs in the queue are set in environment. The variables are like in **currentsong**
      except they get a number like:\
      **MPD\_SONG\_URI** becomes **MPD\_SONG\_%d\_URI** where **%d** is a number starting from 1.
- **list\_all\_meta**:
    * **MPD\_PLAYLIST\_%d\_PATH**: Where **%d** is a number starting from 1. Specifies the path of
      the playlist.
    * **MPD\_PLAYLIST\_%d\_LAST_MODIFIED**: Where **%d** is a number starting from 1. Specifies the
      last modification time (in format: "%Y-%m-%d %H-%M-%S %Z")

# SEE ALSO
`mpd`(1)

# REPORTING BUGS
Report bugs to <alip@exherbo.org>

# COPYRIGHT
Copyright (c) 2009 Ali Polatel <alip@exherbo.org>\
Free use of this software is granted under the terms of the GNU General Public License (GPL).

<!-- vim: set tw=100 ft=pdc spell spelllang=en sw=4 sts=4 et : -->
